/*
 * Sprint JavaScript Library v0.9.2
 * http://sprintjs.com
 *
 * Copyright (c) 2014, 2015 Benjamin De Cock
 * Released under the MIT license
 * http://sprintjs.com/license
 */

var Sprint;

(function() {
  "use strict";

  var addEventListeners = function(listeners, el) {
    var sprintClone = Sprint(el)
    var events = Object.keys(listeners)
    var eventsLen = events.length

    for (var i = 0; i < eventsLen; i++) {
      var event = events[i]
      var handlers = listeners[event]
      var handlersLen = handlers.length

      for (var j = 0; j < handlersLen; j++) {
        sprintClone.on(event, handlers[j])
      }
    }
  }

  var addPx = (function() {
    var noPx = [
      "animation-iteration-count",
      "column-count",
      "flex-grow",
      "flex-shrink",
      "font-weight",
      "line-height",
      "opacity",
      "order",
      "orphans",
      "widows",
      "z-index"
    ]
    return function addPx(cssProperty, value) {
      if (inArray(cssProperty, noPx)) return value
      var stringValue = typeof value == "string" ? value : value.toString()
      if (value && !/\D/.test(stringValue)) {
        stringValue += "px"
      }
      return stringValue
    }
  }())

  var createDOM = function(HTMLString) {
    var tmp = document.createElement("div")
    var tag = /[\w:-]+/.exec(HTMLString)[0]
    var inMap = wrapMap[tag]
    var validHTML = HTMLString.trim()
    if (inMap) {
      validHTML = inMap.intro + validHTML + inMap.outro
    }
    tmp.insertAdjacentHTML("afterbegin", validHTML)
    var node = tmp.lastChild
    if (inMap) {
      var i = inMap.outro.match(/</g).length
      while (i--) {
        node = node.lastChild
      }
    }
    // prevent tmp to be node's parentNode
    tmp.textContent = ""
    return node
  }

  var domMethods = {
    afterbegin: function(el) {
      this.insertBefore(el, this.firstChild)
    },
    afterend: function(el) {
      var parent = this.parentElement
      parent && parent.insertBefore(el, this.nextSibling)
    },
    beforebegin: function(el) {
      var parent = this.parentElement
      parent && parent.insertBefore(el, this)
    },
    beforeend: function(el) {
      this.appendChild(el)
    }
  }

  var duplicateEventListeners = function(el, clone) {
    // Element nodes only
    if (el.nodeType > 1) return

    // Duplicate event listeners for the parent element...
    var listeners = getEvents(el)
    listeners && addEventListeners(listeners, clone)

    // ... and its descendants.
    var descendants = selectElements("*", el)
    var descendantsLen = descendants.length

    // cloneDescendants is defined later to avoid calling selectElements() if not needed
    var cloneDescendants

    for (var i = 0; i < descendantsLen; i++) {
      var listeners = getEvents(descendants[i])
      if (!listeners) continue
      if (!cloneDescendants) {
        cloneDescendants = selectElements("*", clone)
      }
      addEventListeners(listeners, cloneDescendants[i])
    }
  }

  var findAncestors = function(startAtParent, limitToParent, limitToFirstMatch, selector, context) {
    var dom = []
    var self = this
    this.each(function() {
      var prt = startAtParent ? this.parentElement : this
      while (prt) {
        if (context && context == prt) break
        if (!selector || self.is(selector, prt)) {
          dom.push(prt)
          if (limitToFirstMatch) break
        }
        if (limitToParent) break
        prt = prt.parentElement
      }
    })
    return Sprint(removeDuplicates(dom))
  }

  var getEventFromNamespace = function(event) {
    return splitNamespaces(event)[0]
  }

  var getEvents = function(domElement) {
    return domElement.sprintEventListeners
  }

  var getEventsToRemove = function(domElement, event) {
    /*
     * Returns an array with the sprintEventListeners events matching potentially
     * incomplete event names passed to .off().
     * Example: .off("click.myPlugin") and .off("click.simple") would both remove a
     * "click.myPlugin.simple" event.
     */
    return Object.keys(getEvents(domElement)).filter(function(prop) {
      return splitNamespaces(event).every(function(name) {
        return inArray(name, splitNamespaces(prop))
      })
    })
  }

  var getSetDimension = function(obj, prop, value) {
    // get
    if (value == null) {
      var el = obj.get(0)
      if (!el || el.nodeType > 1) return
      var capitalizedProp = prop[0].toUpperCase() + prop.substring(1)
      // dimension of HTML document
      if (el == document) {
        var offset = root["offset" + capitalizedProp]
        var inner = window["inner" + capitalizedProp]
        return offset > inner ? offset : inner
      }
      // dimension of viewport
      if (el == window) {
        return window["inner" + capitalizedProp]
      }
      // dimension of element
      return el.getBoundingClientRect()[prop]
    }

    // set
    var isFunction = typeof value == "function"
    var stringValue = isFunction ? "" : addPx(prop, value)
    return obj.each(function(index) {
      if (this == document || this == window || this.nodeType > 1) return
      if (isFunction) {
        stringValue = addPx(prop, value.call(this, index, Sprint(this)[prop]()))
      }
      this.style[prop] = stringValue
    })
  }

  var insertHTML = function(position, args) {
    var argsLen = args.length
    var contents = args

    // reverse argument list for afterbegin and afterend
    if (argsLen > 1 && position.indexOf("after") > -1) {
      contents = []
      var i = argsLen
      while (i--) {
        contents.push(args[i])
      }
    }

    for (var i = 0; i < argsLen; i++) {
      var content = contents[i]
      if (typeof content == "string" || typeof content == "number") {
        this.each(function() {
          this.insertAdjacentHTML(position, content)
        })
      }
      else if (typeof content == "function") {
        this.each(function(index) {
          var callbackValue = content.call(this, index, this.innerHTML)
          insertHTML.call(Sprint(this), position, [callbackValue])
        })
      }
      else {
        var isSprintObj = content instanceof Init
        var clonedElements = []
        var elementsToInsert = (function() {
          if (isSprintObj) {
            return content.get()
          }
          if (Array.isArray(content)) {
            return sanitize(content, true, true)
          }
          // DOM node
          if (content.nodeType) {
            return [content]
          }
          // getElementsByTagName, getElementsByClassName, querySelectorAll
          return toArray(content)
        }())
        var elementsToInsertLen = elementsToInsert.length

        this.each(function(index) {
          /*
           * The fragment serves multiple purposes:
           * 1) It significantly boosts perf when multiple elements are added.
           * 2) It avoids the need for elementsToInsert.reverse() for afterbegin and afterend
           * 3) It removes an element from its original position before adding it back, which is
           * especially useful for elements not part of the DOM tree. That means it's important even
           * when elementsToInsertLen == 1.
           */
          var fragment = document.createDocumentFragment()
          for (var i = 0; i < elementsToInsertLen; i++) {
            var element = elementsToInsert[i]
            var elementToInsert
            if (index) {
              elementToInsert = element.cloneNode(true)
              duplicateEventListeners(element, elementToInsert)
            }
            else {
              elementToInsert = element
            }
            fragment.appendChild(elementToInsert)
            clonedElements.push(elementToInsert)
          }
          domMethods[position].call(this, fragment)
        })

        if (isSprintObj) {
          content.dom = clonedElements
          content.length = clonedElements.length
        }
        if (i < argsLen-1) continue
        return clonedElements
      }
    }
  }

  var inArray = function(el, arr) {
    var i = arr.length
    while (i--) {
      if (arr[i] === el) return true
    }
    return false
  }

  var isNamespaced = function(event) {
    return /\./.test(event)
  }

  var manipulateClass = function(method, className, bool) {
    if (className == null) {
      if (method == "add") {
        return this
      }
      return this.removeAttr("class")
    }

    var isString
    var classNames
    var classNamesLen

    if (typeof className == "string") {
      isString = true
      classNames = className.trim().split(" ")
      classNamesLen = classNames.length
    }

    return this.each(function(i, el) {
      if (this.nodeType > 1) return
      if (!isString) {
        // className is a function
        var callbackValue = className.call(el, i, el.className)
        if (!callbackValue) return
        classNames = callbackValue.trim().split(" ")
        classNamesLen = classNames.length
      }
      for (var j = 0; j < classNamesLen; j++) {
        var name = classNames[j]
        if (!name) continue
        bool == null
          ? el.classList[method](name)
          : el.classList.toggle(name, bool)
      }
    })
  }

  var matches = (function() {
    var names = [
      "mozMatchesSelector",
      "webkitMatchesSelector",
      "msMatchesSelector",
      "matches"
    ]
    var i = names.length
    while (i--) {
      var name = names[i]
      if (!Element.prototype[name]) continue
      return name
    }
  }())

  var removeDuplicates = function(arr) {
    var clean = []
    var cleanLen = 0
    var arrLen = arr.length

    for (var i = 0; i < arrLen; i++) {
      var el = arr[i]
      var duplicate = false

      for (var j = 0; j < cleanLen; j++) {
        if (el !== clean[j]) continue
        duplicate = true
        break
      }

      if (duplicate) continue
      clean[cleanLen++] = el
    }

    return clean
  }

  var removeEvent = (function() {
    var isHandlerShared = function(el, event, registeredHandler) {
      var similarEventsHandlers = Object.keys(getEvents(el)).filter(function(prop) {
        return getEventFromNamespace(event) === getEventFromNamespace(prop)
      }).map(function(ev) {
        return getEvents(el)[ev]
      }).reduce(function(a, b) {
        return a.concat(b)
      }).filter(function(handler) {
        return handler === registeredHandler
      })
      if (similarEventsHandlers.length < 2) return false
      return true
    }
    var removeListener = function(el, event, namedHandler) {
      return function(registeredHandler) {
        if (namedHandler && namedHandler !== registeredHandler) return
        el.removeEventListener(event, registeredHandler)
        if (!isNamespaced(event) || isHandlerShared(el, event, registeredHandler)) return
        el.removeEventListener(getEventFromNamespace(event), registeredHandler)
      }
    }
    var clearRegisteredHandlers = function(registeredHandlers, namedHandler) {
      return registeredHandlers.filter(function(handler) {
        return namedHandler && namedHandler !== handler
      })
    }
    return function(el, namedHandler) {
      return function(event) {
        getEvents(el)[event].forEach(removeListener(el, event, namedHandler))
        getEvents(el)[event] = clearRegisteredHandlers(getEvents(el)[event], namedHandler)
      }
    }
  }())

  var removeMatchedEvents = function(el, namedHandler) {
    return function(event) {
      getEventsToRemove(el, event).forEach(removeEvent(el, namedHandler))
    }
  }

  var root = document.documentElement

  var sanitize = function(arr, flattenObjects, requireDomNodes) {
    /*
     * Remove null's from array. Optionally, flatten Sprint objects and convert strings and numbers
     * to DOM text nodes.
     */
    var arrLen = arr.length
    var i = arrLen

    // Check if arr needs to be sanitized first (significant perf boost for the most common case)
    while (i--) {
      // arr needs to be sanitized
      if ( (!arr[i] && arr[i] !== 0)
        || (flattenObjects && arr[i] instanceof Init)
        || (requireDomNodes && (typeof arr[i] == "string" || typeof arr[i] == "number"))
      ) {
        var sanitized = []
        for (var j = 0; j < arrLen; j++) {
          var el = arr[j]
          if (!el && el !== 0) continue
          if (flattenObjects && el instanceof Init) {
            for (var k = 0; k < el.length; k++) {
              sanitized.push(el.get(k))
            }
            continue
          }
          if (requireDomNodes && (typeof el == "string" || typeof el == "number")) {
            sanitized.push(document.createTextNode(el))
            continue
          }
          sanitized.push(el)
        }
        return sanitized
      }
    }

    // arr didn't need to be sanitized, return it
    return arr
  }

  var scroll = (function() {
    var scrollRoot
    return function(sprintObj, method, value) {
      // define scroll root element on first run
      if (!scrollRoot) {
        var initialScrollPos = root.scrollTop
        root.scrollTop = initialScrollPos + 1
        var updatedScrollPos = root.scrollTop
        root.scrollTop = initialScrollPos
        scrollRoot = updatedScrollPos > initialScrollPos
          ? root // spec-compliant browsers (like FF34 and IE11)
          : document.body // naughty boys (like Chrome 39 and Safari 8)
      }

      // get scroll position
      if (value == null) {
        var el = sprintObj.get(0)
        if (!el) return
        if (el == window || el == document) {
          el = scrollRoot
        }
        return el[method]
      }

      // set scroll position
      return sprintObj.each(function() {
        var el = this
        if (el == window || el == document) {
          el = scrollRoot
        }
        el[method] = value
      })
    }
  }())

  var selectAdjacentSiblings = function(sprintObj, direction, selector, until) {
    var dom = []
    var prop = direction + "ElementSibling"
    sprintObj.each(function() {
      var el = this
      while (el = el[prop]) {
        if (until && sprintObj.is(until, el)) break
        if (selector && !sprintObj.is(selector, el)) continue
        dom.push(el)
      }
    })
    return Sprint(removeDuplicates(dom))
  }

  var selectImmediateAdjacentSibling = function(sprintObj, direction, selector) {
    var prop = direction + "ElementSibling"
    return sprintObj.map(function() {
      var el = this[prop]
      if (!el || (selector && !sprintObj.is(selector, el))) return
      return el
    }, false)
  }

  var selectElements = function(selector, context) {
    context = context || document
    // class, id, tag name or universal selector
    if (/^[\#.]?[\w-]+$/.test(selector)) {
      var firstChar = selector[0]
      if (firstChar == ".") {
        return toArray(context.getElementsByClassName(selector.slice(1)))
      }
      if (firstChar == "#") {
        var el = context.getElementById(selector.slice(1))
        return el ? [el] : []
      }
      if (selector == "body") {
        return [document.body]
      }
      return toArray(context.getElementsByTagName(selector))
    }
    return toArray(context.querySelectorAll(selector))
  }

  var splitNamespaces = function(event) {
    return sanitize(event.split("."))
  }

  var toArray = function(obj) {
    var arr = []
    var i = obj.length
    while (i--) {
      arr[i] = obj[i]
    }
    return arr
  }

  var wrap = (function() {
    var callback = function(wrappingElement, variant) {
      var wrap = Sprint(wrappingElement).clone(true).get(0)
      var innerWrap = wrap
      if (!wrap || this.nodeType > 1) return
      while (innerWrap.firstChild) {
        innerWrap = innerWrap.firstChild
      }
      if (variant == "inner") {
        while (this.firstChild) {
          innerWrap.appendChild(this.firstChild)
        }
        this.appendChild(wrap)
      }
      else {
        var el = variant == "all" ? this.get(0) : this
        var prt = el.parentNode
        var next = el.nextSibling
        variant == "all"
          ? this.each(function() { innerWrap.appendChild(this) })
          : innerWrap.appendChild(el)
        prt.insertBefore(wrap, next)
      }
    }
    return function(wrappingElement, variant) {
      if (typeof wrappingElement == "function") {
        this.each(function(i) {
          Sprint(this)[variant == "inner" ? "wrapInner" : "wrap"](wrappingElement.call(this, i))
        })
      }
      else {
        variant == "all"
          ? callback.call(this, wrappingElement, variant)
          : this.each(function() { callback.call(this, wrappingElement, variant) })
      }
      return this
    }
  }())

  var wrapMap = {
    legend: {
      intro: "<fieldset>",
      outro: "</fieldset>"
    },
    area: {
      intro: "<map>",
      outro: "</map>"
    },
    param: {
      intro: "<object>",
      outro: "</object>"
    },
    thead: {
      intro: "<table>",
      outro: "</table>"
    },
    tr: {
      intro: "<table><tbody>",
      outro: "</tbody></table>"
    },
    col: {
      intro: "<table><tbody></tbody><colgroup>",
      outro: "</colgroup></table>"
    },
    td: {
      intro: "<table><tbody><tr>",
      outro: "</tr></tbody></table>"
    }
  };
  // elements needing a construct already defined by other elements
  ["tbody", "tfoot", "colgroup", "caption"].forEach(function(tag) {
    wrapMap[tag] = wrapMap.thead
  })
  wrapMap.th = wrapMap.td

  // constructor

  var Init = function(selector, context) {
    if (typeof selector == "string") {
      // create DOM element
      if (selector[0] == "<") {
        this.dom = [createDOM(selector)]
      }
      // select DOM elements
      else {
        this.dom = context && context instanceof Init
          ? context.find(selector).get()
          : selectElements(selector, context)
      }
    }
    else if (Array.isArray(selector)) {
      this.dom = sanitize(selector)
    }
    else if (
      selector instanceof NodeList ||
      selector instanceof HTMLCollection
    ) {
      this.dom = toArray(selector)
    }
    else if (selector instanceof Init) {
      return selector
    }
    else if (typeof selector == "function") {
      return this.ready(selector)
    }
    else {
      // assume DOM node
      this.dom = selector ? [selector] : []
    }
    this.length = this.dom.length
  }

  Init.prototype = {
    add: function(selector) {
      var dom = this.get()
      var objToAdd = Sprint(selector)
      var domToAdd = objToAdd.get()
      for (var i = 0; i < objToAdd.length; i++) {
        dom.push(domToAdd[i])
      }
      return Sprint(removeDuplicates(dom))
    },
    addClass: function(className) {
      return manipulateClass.call(this, "add", className)
    },
    after: function() {
      insertHTML.call(this, "afterend", arguments)
      return this
    },
    append: function() {
      insertHTML.call(this, "beforeend", arguments)
      return this
    },
    appendTo: function(target) {
      return Sprint(insertHTML.call(Sprint(target), "beforeend", [this]))
    },
    attr: function(name, value) {
      var isFunc = typeof value == "function"
      if (typeof value == "string" || typeof value == "number" || isFunc) {
        return this.each(function(i) {
          if (this.nodeType > 1) return
          this.setAttribute(
            name, isFunc ? value.call(this, i, this.getAttribute(name)) : value
          )
        })
      }
      if (typeof name == "object") {
        var attrNames = Object.keys(name)
        var attrNamesLen = attrNames.length
        return this.each(function() {
          if (this.nodeType > 1) return
          for (var i = 0; i < attrNamesLen; i++) {
            var attribute = attrNames[i]
            this.setAttribute(attribute, name[attribute])
          }
        })
      }
      var el = this.get(0)
      if (!el || el.nodeType > 1) return
      var attrValue = el.getAttribute(name)
      if (attrValue == null) {
        return undefined
      }
      if (!attrValue) {
        return name
      }
      return attrValue
    },
    before: function() {
      insertHTML.call(this, "beforebegin", arguments)
      return this
    },
    children: function(selector) {
      var dom = []
      var self = this
      this.each(function() {
        if (this.nodeType > 1) return
        var nodes = this.children
        var nodesLen = nodes.length
        for (var i = 0; i < nodesLen; i++) {
          var node = nodes[i]
          if (!selector || self.is(selector, node)) {
            dom.push(node)
          }
        }
      })
      return Sprint(dom)
    },
    clone: function(withEvents) {
      return this.map(function() {
        if (!this) return
        var clone = this.cloneNode(true)
        withEvents && duplicateEventListeners(this, clone)
        return clone
      }, false)
    },
    closest: function(selector, context) {
      return findAncestors.call(this, false, false, true, selector, context)
    },
    css: function(property, value) {
      var valueType = typeof value
      var isString = valueType == "string"

      // set
      if (isString || valueType == "number") {
        var isRelativeValue = isString && /=/.test(value)
        if (isRelativeValue) {
          var relativeValue = parseInt(value[0] + value.slice(2))
        }
        return this.each(function() {
          if (this.nodeType > 1) return
          if (isRelativeValue) {
            var current = parseInt(getComputedStyle(this).getPropertyValue(property))
            var result = current + relativeValue
          }
          this.style[property] = addPx(property, isRelativeValue ? result : value)
        })
      }
      // set
      if (valueType == "function") {
        return this.each(function(index) {
          if (this.nodeType > 1) return
          var oldValue = getComputedStyle(this).getPropertyValue(property)
          this.style[property] = value.call(this, index, oldValue)
        })
      }
      // read
      if (typeof property == "string") {
        var el = this.get(0)
        if (!el || el.nodeType > 1) return
        return getComputedStyle(el).getPropertyValue(property)
      }
      // read
      if (Array.isArray(property)) {
        var el = this.get(0)
        if (!el || el.nodeType > 1) return
        var o = {}
        var styles = getComputedStyle(el)
        var propertyLen = property.length
        for (var i = 0; i < propertyLen; i++) {
          var prop = property[i]
          o[prop] = styles.getPropertyValue(prop)
        }
        return o
      }
      // set
      var properties = Object.keys(property)
      var propertiesLen = properties.length
      return this.each(function() {
        if (this.nodeType > 1) return
        for (var i = 0; i < propertiesLen; i++) {
          var prop = properties[i]
          this.style[prop] = addPx(prop, property[prop])
        }
      })
    },
    detach: function() {
      return this.map(function() {
        var parent = this.parentElement
        if (!parent) return
        parent.removeChild(this)
        return this
      }, false)
    },
    each: function(callback) {
      // callback(index, element) where element == this
      var dom = this.dom
      var len = this.length
      for (var i = 0; i < len; i++) {
        var node = dom[i]
        callback.call(node, i, node)
      }
      return this
    },
    empty: function() {
      return this.each(function() {
        this.innerHTML = ""
      })
    },
    eq: function(index) {
      return Sprint(this.get(index))
    },
    filter: function(selector) {
      var isFunc = typeof selector == "function"
      var self = this
      return this.map(function(i) {
        if ( this.nodeType > 1
          || (!isFunc && !self.is(selector, this))
          || (isFunc && !selector.call(this, i, this))
        ) return
        return this
      }, false)
    },
    find: function(selector) {
      // .find(selector)
      if (typeof selector == "string") {
        var dom = []
        this.each(function() {
          if (this.nodeType > 1) return
          var elements = selectElements(selector, this)
          var elementsLen = elements.length
          for (var i = 0; i < elementsLen; i++) {
            dom.push(elements[i])
          }
        })
        return Sprint(removeDuplicates(dom))
      }

      // .find(element)
      var elementsToFind = selector.nodeType ? [selector] : selector.get()
      var elementsToFindLen = elementsToFind.length
      var elementsFound = []
      var elementsFoundLen = 0

      for (var i = 0; i < this.length; i++) {
        var el = this.get(i)
        if (el.nodeType > 1) continue
        // check if each element in `this` contains the elements to find
        for (var j = 0; j < elementsToFindLen; j++) {
          var elementToFind = elementsToFind[j]
          if (!el.contains(elementToFind)) continue
          elementsFound[elementsFoundLen++] = elementToFind
          if (elementsFoundLen < elementsToFindLen) continue
          // everything has been found, return results
          return Sprint(elementsFound)
        }
      }

      // some elements in elementsToFind weren't descendants of `this`
      return Sprint(elementsFound)
    },
    first: function() {
      return this.eq(0)
    },
    get: function(index) {
      if (index == null) {
        return this.dom
      }
      if (index < 0) {
        index += this.length
      }
      return this.dom[index]
    },
    has: function(selector) {
      // .has(selector)
      if (typeof selector == "string") {
        return this.map(function() {
          if (this.nodeType > 1 || !selectElements(selector, this)[0]) return
          return this
        }, false)
      }

      // .has(contained)
      var result = []
      var i = this.length
      while (i--) {
        var el = this.get(i)
        if (!el.contains(selector)) continue
        result.push(el)
        break
      }
      return Sprint(result)
    },
    hasClass: function(name) {
      var i = this.length
      while (i--) {
        var el = this.get(i)
        if (el.nodeType > 1) return
        if (el.classList.contains(name)) {
          return true
        }
      }
      return false
    },
    height: function(value) {
      return getSetDimension(this, "height", value)
    },
    html: function(htmlString) {
      if (htmlString == null) {
        var el = this.get(0)
        if (!el) return
        return el.innerHTML
      }
      if (typeof htmlString == "function") {
        return this.each(function(i) {
          var content = htmlString.call(this, i, this.innerHTML)
          Sprint(this).html(content)
        })
      }
      return this.each(function() {
        this.innerHTML = htmlString
      })
    },
    index: function(el) {
      if (!this.length) return
      var toFind
      var sprintElements
      if (!el) {
        toFind = this.get(0)
        sprintElements = this.first().parent().children()
      }
      else if (typeof el == "string") {
        toFind = this.get(0)
        sprintElements = Sprint(el)
      }
      else {
        toFind = el instanceof Init ? el.get(0) : el
        sprintElements = this
      }
      var elements = sprintElements.get()
      var i = elements.length
      while (i--) {
        if (elements[i] == toFind) {
          return i
        }
      }
      return -1
    },
    insertAfter: function(target) {
      Sprint(target).after(this)
      return this
    },
    insertBefore: function(target) {
      Sprint(target).before(this)
      return this
    },
    is: function(selector, element) {
      // element is undocumented, internal-use only.
      // It gives better perfs as it prevents the creation of many objects in internal methods.
      var set = element ? [element] : this.get()
      var setLen = set.length

      if (typeof selector == "string") {
        for (var i = 0; i < setLen; i++) {
          var el = set[i]
          if (el.nodeType > 1) continue
          if (el[matches](selector)) {
            return true
          }
        }
        return false
      }
      if (typeof selector == "object") {
        // Sprint object or DOM element(s)
        var obj
        if (selector instanceof Init) {
          obj = selector.get()
        }
        else {
          obj = selector.length ? selector : [selector]
        }
        var objLen = obj.length
        for (var i = 0; i < setLen; i++) {
          for (var j = 0; j < objLen; j++) {
            if (set[i] === obj[j]) {
              return true
            }
          }
        }
        return false
      }
      if (typeof selector == "function") {
        for (var i = 0; i < setLen; i++) {
          if (selector.call(this, i, this)) {
            return true
          }
        }
        return false
      }
    },
    last: function() {
      return this.eq(-1)
    },
    map: function(callback, flattenArrays) {
      /*
       * flattenArrays (bool, true by default) is for internal usage only (although it might be
       * interesting to document it publicly).
       * Many methods rely on map(), thus being able to avoid the unnecessary Array.isArray() check
       * on each element is a significant perf boost.
       */
      if (flattenArrays == null) {
        flattenArrays = true
      }

      var dom = this.get()
      var len = this.length
      var values = []

      for (var i = 0; i < len; i++) {
        var el = dom[i]
        var val = callback.call(el, i, el)

        if (flattenArrays && Array.isArray(val)) {
          var valLen = val.length
          for (var j = 0; j < valLen; j++) {
            values.push(val[j])
          }
          continue
        }

        values.push(val)
      }

      return Sprint(values)
    },
    next: function(selector) {
      return selectImmediateAdjacentSibling(this, "next", selector)
    },
    nextAll: function(selector) {
      return selectAdjacentSiblings(this, "next", selector)
    },
    nextUntil: function(selector, filter) {
      return selectAdjacentSiblings(this, "next", filter, selector)
    },
    not: function(selector) {
      var isFunc = typeof selector == "function"
      var self = this
      return this.map(function(i) {
        if (isFunc) {
          if (selector.call(this, i, this)) return
        }
        else {
          if (self.is(selector, this)) return
        }
        return this
      }, false)
    },
    off: function(events, handler) {
      if (typeof events == "object") {
        Object.keys(events).forEach(function(event) {
          this.off(event, events[event])
        }, this)
        return this
      }
      if (events) {
        events = events.trim().split(" ")
      }
      return this.each(function() {
        if (!getEvents(this)) return
        if (events) {
          events.forEach(removeMatchedEvents(this, handler))
          return
        }
        Object.keys(getEvents(this)).forEach(removeEvent(this))
      })
    },
    offset: function(coordinates) {
      if (!coordinates) {
        var el = this.get(0)
        if (!el || el.nodeType > 1) return
        var pos = el.getBoundingClientRect()
        return {
          top: pos.top,
          left: pos.left
        }
      }
      if (typeof coordinates == "object") {
        return this.each(function() {
          if (this.nodeType > 1) return
          var $this = Sprint(this)
          $this.css("position") == "static"
            ? $this.css("position", "relative")
            : $this.css({
              top: 0,
              left: 0
            })
          var pos = $this.offset()
          $this.css({
            top: coordinates.top - pos.top + "px",
            left: coordinates.left - pos.left + "px"
          })
        })
      }
      if (typeof coordinates == "function") {
        return this.each(function(i) {
          var $this = Sprint(this)
          var posObj = coordinates.call(this, i, $this.offset())
          $this.offset(posObj)
        })
      }
    },
    offsetParent: function() {
      var dom = []
      this.each(function() {
        if (this.nodeType > 1) return
        var prt = this
        while (prt != root) {
          prt = prt.parentNode
          var pos = getComputedStyle(prt).getPropertyValue("position")
          if (!pos) break
          if (pos != "static") {
            dom.push(prt)
            return
          }
        }
        dom.push(root)
      })
      return Sprint(dom)
    },
    on: function(events, handler) {
      // .on(events, handler)
      if (handler) {
        var eventsArr = events.trim().split(" ")

        return this.each(function() {
          if (!getEvents(this)) {
            this.sprintEventListeners = {}
          }
          eventsArr.forEach(function(event) {
            if (!getEvents(this)[event]) {
              getEvents(this)[event] = []
            }
            getEvents(this)[event].push(handler)

            // Ensure we add both the standard event (eg: "click") and the full event
            // (eg: "click.foo") in order to be able to trigger them manually and programmatically.
            this.addEventListener(event, handler)
            if (!isNamespaced(event)) return
            this.addEventListener(getEventFromNamespace(event), handler)
          }, this)
        })
      }

      // .on({ event: handler })
      Object.keys(events).forEach(function(event) {
        this.on(event, events[event])
      }, this)
      return this
    },
    parent: function(selector) {
      return findAncestors.call(this, true, true, false, selector)
    },
    parents: function(selector) {
      /* Differences with jQuery:
       * 1. $("html").parent() and $("html").parents() return an empty set.
       * 2. The returned set won't be in reverse order.
       */
      return findAncestors.call(this, true, false, false, selector)
    },
    position: function() {
      var pos = {
        first: this.offset(),
        prt: this.parent().offset()
      }
      if (!pos.first) return
      return {
        top: pos.first.top - pos.prt.top,
        left: pos.first.left - pos.prt.left
      }
    },
    prop: function(propertyName, value) {
      if (typeof propertyName == "object") {
        var props = Object.keys(propertyName)
        var propsLen = props.length
        return this.each(function() {
          for (var i = 0; i < propsLen; i++) {
            var prop = props[i]
            this[prop] = propertyName[prop]
          }
        })
      }
      if (value == null) {
        var el = this.get(0)
        if (!el) return
        return el[propertyName]
      }
      var isFunc = typeof value == "function"
      return this.each(function(i) {
        this[propertyName] = isFunc ? value.call(this, i, this[propertyName]) : value
      })
    },
    prepend: function() {
      insertHTML.call(this, "afterbegin", arguments)
      return this
    },
    prependTo: function(target) {
      return Sprint(insertHTML.call(Sprint(target), "afterbegin", [this]))
    },
    prev: function(selector) {
      return selectImmediateAdjacentSibling(this, "previous", selector)
    },
    prevAll: function(selector) {
      return selectAdjacentSiblings(this, "previous", selector)
    },
    prevUntil: function(selector, filter) {
      return selectAdjacentSiblings(this, "previous", filter, selector)
    },
    ready: function(handler) {
      this.dom = [document]
      this.length = 1
      return this.on("DOMContentLoaded", handler)
    },
    remove: function(selector) {
      var self = this
      return this.each(function() {
        var parent = this.parentElement
        if (!parent) return
        if (!selector || self.is(selector, this)) {
          parent.removeChild(this)
        }
      })
    },
    removeAttr: function(attributeName) {
      if (attributeName) {
        var attributes = attributeName.trim().split(" ")
        var attributesLen = attributes.length
        this.each(function() {
          if (this.nodeType > 1) return
          for (var i = 0; i < attributesLen; i++) {
            this.removeAttribute(attributes[i])
          }
        })
      }
      return this
    },
    removeClass: function(className) {
      return manipulateClass.call(this, "remove", className)
    },
    removeProp: function(propertyName) {
      return this.each(function() {
        this[propertyName] = undefined
      })
    },
    replaceAll: function(target) {
      Sprint(target).replaceWith(this)
      return this
    },
    replaceWith: function(newContent) {
      if (typeof newContent == "function") {
        return this.each(function(i) {
          Sprint(this).replaceWith(newContent.call(this, i, this))
        })
      }
      return this.before(newContent).remove()
    },
    scrollLeft: function(value) {
      return scroll(this, "scrollLeft", value)
    },
    scrollTop: function(value) {
      return scroll(this, "scrollTop", value)
    },
    siblings: function(selector) {
      var siblings = []
      var self = this
      this.each(function(i, el) {
        Sprint(this).parent().children().each(function() {
          if (this == el || (selector && !self.is(selector, this))) return
          siblings.push(this)
        })
      })
      return Sprint(siblings)
    },
    size: function() {
      return this.length
    },
    slice: function(start, end) {
      var dom = this.get()
      var range = []
      var i = start >= 0 ? start : start + this.length
      var l = this.length
      if (end < 0) {
        l += end
      }
      else if (end >= 0) {
        l = end > this.length ? this.length : end
      }
      for (; i < l; i++) {
        range.push(dom[i])
      }
      return Sprint(range)
    },
    text: function(content) {
      if (content == null) {
        var textContents = []
        this.each(function() {
          textContents.push(this.textContent)
        })
        return textContents.join("")
      }
      var isFunc = typeof content == "function"
      return this.each(function(i) {
        this.textContent = isFunc ? content.call(this, i, this.textContent) : content
      })
    },
    toggleClass: function(className, bool) {
      return manipulateClass.call(this, "toggle", className, bool)
    },
    trigger: function(event) {
      // IE polyfill
      if (!window.CustomEvent || typeof window.CustomEvent !== "function") {
        var CustomEvent = function(event, params) {
          var evt
          params = params || {
            bubbles: false,
            cancelable: false,
            detail: undefined
          }
          evt = document.createEvent("CustomEvent")
          evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail)
          return evt
        }
        CustomEvent.prototype = window.Event.prototype
        window.CustomEvent = CustomEvent
      }
      return this.each(function() {
        getEventsToRemove(this, event).forEach(function(matchedEvent) {
          this.dispatchEvent(new CustomEvent(matchedEvent, {
            bubbles: true,
            cancelable: true
          }))
        }, this)
      })
    },
    unwrap: function() {
      this.parent().each(function() {
        if (this == document.body || this == root) return
        Sprint(this).replaceWith(this.childNodes)
      })
      return this
    },
    val: function(value) {
      if (value == null) {
        var el = this.get(0)
        if (!el) return
        if (el.multiple) {
          var values = []
          this.first().children(":checked").each(function() {
            values.push(this.value)
          })
          return values
        }
        return el.value
      }
      if (Array.isArray(value)) {
        var self = this
        return this.each(function() {
          if (this.multiple) {
            self.children().each(function() {
              this.selected = inArray(this.value, value)
            })
            return
          }
          this.checked = inArray(this.value, value)
        })
      }
      if (typeof value == "function") {
        return this.each(function(i) {
          Sprint(this).val(value.call(this, i, this.value))
        })
      }
      return this.each(function() {
        this.value = value
      })
    },
    width: function(value) {
      return getSetDimension(this, "width", value)
    },
    wrap: function(wrappingElement) {
      return wrap.call(this, wrappingElement)
    },
    wrapAll: function(wrappingElement) {
      return wrap.call(this, wrappingElement, "all")
    },
    wrapInner: function(wrappingElement) {
      return wrap.call(this, wrappingElement, "inner")
    }
  }

  // public

  Sprint = function(selector, context) {
    return new Init(selector, context)
  }

  if (window.$ == null) {
    window.$ = Sprint
  }
}());

;(function () {
	'use strict';

	/**
	 * @preserve FastClick: polyfill to remove click delays on browsers with touch UIs.
	 *
	 * @codingstandard ftlabs-jsv2
	 * @copyright The Financial Times Limited [All Rights Reserved]
	 * @license MIT License (see LICENSE.txt)
	 */

	/*jslint browser:true, node:true*/
	/*global define, Event, Node*/


	/**
	 * Instantiate fast-clicking listeners on the specified layer.
	 *
	 * @constructor
	 * @param {Element} layer The layer to listen on
	 * @param {Object} [options={}] The options to override the defaults
	 */
	function FastClick(layer, options) {
		var oldOnClick;

		options = options || {};

		/**
		 * Whether a click is currently being tracked.
		 *
		 * @type boolean
		 */
		this.trackingClick = false;


		/**
		 * Timestamp for when click tracking started.
		 *
		 * @type number
		 */
		this.trackingClickStart = 0;


		/**
		 * The element being tracked for a click.
		 *
		 * @type EventTarget
		 */
		this.targetElement = null;


		/**
		 * X-coordinate of touch start event.
		 *
		 * @type number
		 */
		this.touchStartX = 0;


		/**
		 * Y-coordinate of touch start event.
		 *
		 * @type number
		 */
		this.touchStartY = 0;


		/**
		 * ID of the last touch, retrieved from Touch.identifier.
		 *
		 * @type number
		 */
		this.lastTouchIdentifier = 0;


		/**
		 * Touchmove boundary, beyond which a click will be cancelled.
		 *
		 * @type number
		 */
		this.touchBoundary = options.touchBoundary || 10;


		/**
		 * The FastClick layer.
		 *
		 * @type Element
		 */
		this.layer = layer;

		/**
		 * The minimum time between tap(touchstart and touchend) events
		 *
		 * @type number
		 */
		this.tapDelay = options.tapDelay || 200;

		/**
		 * The maximum time for a tap
		 *
		 * @type number
		 */
		this.tapTimeout = options.tapTimeout || 700;

		if (FastClick.notNeeded(layer)) {
			return;
		}

		// Some old versions of Android don't have Function.prototype.bind
		function bind(method, context) {
			return function() { return method.apply(context, arguments); };
		}


		var methods = ['onMouse', 'onClick', 'onTouchStart', 'onTouchMove', 'onTouchEnd', 'onTouchCancel'];
		var context = this;
		for (var i = 0, l = methods.length; i < l; i++) {
			context[methods[i]] = bind(context[methods[i]], context);
		}

		// Set up event handlers as required
		if (deviceIsAndroid) {
			layer.addEventListener('mouseover', this.onMouse, true);
			layer.addEventListener('mousedown', this.onMouse, true);
			layer.addEventListener('mouseup', this.onMouse, true);
		}

		layer.addEventListener('click', this.onClick, true);
		layer.addEventListener('touchstart', this.onTouchStart, false);
		layer.addEventListener('touchmove', this.onTouchMove, false);
		layer.addEventListener('touchend', this.onTouchEnd, false);
		layer.addEventListener('touchcancel', this.onTouchCancel, false);

		// Hack is required for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
		// which is how FastClick normally stops click events bubbling to callbacks registered on the FastClick
		// layer when they are cancelled.
		if (!Event.prototype.stopImmediatePropagation) {
			layer.removeEventListener = function(type, callback, capture) {
				var rmv = Node.prototype.removeEventListener;
				if (type === 'click') {
					rmv.call(layer, type, callback.hijacked || callback, capture);
				} else {
					rmv.call(layer, type, callback, capture);
				}
			};

			layer.addEventListener = function(type, callback, capture) {
				var adv = Node.prototype.addEventListener;
				if (type === 'click') {
					adv.call(layer, type, callback.hijacked || (callback.hijacked = function(event) {
						if (!event.propagationStopped) {
							callback(event);
						}
					}), capture);
				} else {
					adv.call(layer, type, callback, capture);
				}
			};
		}

		// If a handler is already declared in the element's onclick attribute, it will be fired before
		// FastClick's onClick handler. Fix this by pulling out the user-defined handler function and
		// adding it as listener.
		if (typeof layer.onclick === 'function') {

			// Android browser on at least 3.2 requires a new reference to the function in layer.onclick
			// - the old one won't work if passed to addEventListener directly.
			oldOnClick = layer.onclick;
			layer.addEventListener('click', function(event) {
				oldOnClick(event);
			}, false);
			layer.onclick = null;
		}
	}

	/**
	* Windows Phone 8.1 fakes user agent string to look like Android and iPhone.
	*
	* @type boolean
	*/
	var deviceIsWindowsPhone = navigator.userAgent.indexOf("Windows Phone") >= 0;

	/**
	 * Android requires exceptions.
	 *
	 * @type boolean
	 */
	var deviceIsAndroid = navigator.userAgent.indexOf('Android') > 0 && !deviceIsWindowsPhone;


	/**
	 * iOS requires exceptions.
	 *
	 * @type boolean
	 */
	var deviceIsIOS = /iP(ad|hone|od)/.test(navigator.userAgent) && !deviceIsWindowsPhone;


	/**
	 * iOS 4 requires an exception for select elements.
	 *
	 * @type boolean
	 */
	var deviceIsIOS4 = deviceIsIOS && (/OS 4_\d(_\d)?/).test(navigator.userAgent);


	/**
	 * iOS 6.0-7.* requires the target element to be manually derived
	 *
	 * @type boolean
	 */
	var deviceIsIOSWithBadTarget = deviceIsIOS && (/OS [6-7]_\d/).test(navigator.userAgent);

	/**
	 * BlackBerry requires exceptions.
	 *
	 * @type boolean
	 */
	var deviceIsBlackBerry10 = navigator.userAgent.indexOf('BB10') > 0;

	/**
	 * Determine whether a given element requires a native click.
	 *
	 * @param {EventTarget|Element} target Target DOM element
	 * @returns {boolean} Returns true if the element needs a native click
	 */
	FastClick.prototype.needsClick = function(target) {
		switch (target.nodeName.toLowerCase()) {

		// Don't send a synthetic click to disabled inputs (issue #62)
		case 'button':
		case 'select':
		case 'textarea':
			if (target.disabled) {
				return true;
			}

			break;
		case 'input':

			// File inputs need real clicks on iOS 6 due to a browser bug (issue #68)
			if ((deviceIsIOS && target.type === 'file') || target.disabled) {
				return true;
			}

			break;
		case 'label':
		case 'iframe': // iOS8 homescreen apps can prevent events bubbling into frames
		case 'video':
			return true;
		}

		return (/\bneedsclick\b/).test(target.className);
	};


	/**
	 * Determine whether a given element requires a call to focus to simulate click into element.
	 *
	 * @param {EventTarget|Element} target Target DOM element
	 * @returns {boolean} Returns true if the element requires a call to focus to simulate native click.
	 */
	FastClick.prototype.needsFocus = function(target) {
		switch (target.nodeName.toLowerCase()) {
		case 'textarea':
			return true;
		case 'select':
			return !deviceIsAndroid;
		case 'input':
			switch (target.type) {
			case 'button':
			case 'checkbox':
			case 'file':
			case 'image':
			case 'radio':
			case 'submit':
				return false;
			}

			// No point in attempting to focus disabled inputs
			return !target.disabled && !target.readOnly;
		default:
			return (/\bneedsfocus\b/).test(target.className);
		}
	};


	/**
	 * Send a click event to the specified element.
	 *
	 * @param {EventTarget|Element} targetElement
	 * @param {Event} event
	 */
	FastClick.prototype.sendClick = function(targetElement, event) {
		var clickEvent, touch;

		// On some Android devices activeElement needs to be blurred otherwise the synthetic click will have no effect (#24)
		if (document.activeElement && document.activeElement !== targetElement) {
			document.activeElement.blur();
		}

		touch = event.changedTouches[0];

		// Synthesise a click event, with an extra attribute so it can be tracked
		clickEvent = document.createEvent('MouseEvents');
		clickEvent.initMouseEvent(this.determineEventType(targetElement), true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
		clickEvent.forwardedTouchEvent = true;
		targetElement.dispatchEvent(clickEvent);
	};

	FastClick.prototype.determineEventType = function(targetElement) {

		//Issue #159: Android Chrome Select Box does not open with a synthetic click event
		if (deviceIsAndroid && targetElement.tagName.toLowerCase() === 'select') {
			return 'mousedown';
		}

		return 'click';
	};


	/**
	 * @param {EventTarget|Element} targetElement
	 */
	FastClick.prototype.focus = function(targetElement) {
		var length;

		// Issue #160: on iOS 7, some input elements (e.g. date datetime month) throw a vague TypeError on setSelectionRange. These elements don't have an integer value for the selectionStart and selectionEnd properties, but unfortunately that can't be used for detection because accessing the properties also throws a TypeError. Just check the type instead. Filed as Apple bug #15122724.
		if (deviceIsIOS && targetElement.setSelectionRange && targetElement.type.indexOf('date') !== 0 && targetElement.type !== 'time' && targetElement.type !== 'month') {
			length = targetElement.value.length;
			targetElement.setSelectionRange(length, length);
		} else {
			targetElement.focus();
		}
	};


	/**
	 * Check whether the given target element is a child of a scrollable layer and if so, set a flag on it.
	 *
	 * @param {EventTarget|Element} targetElement
	 */
	FastClick.prototype.updateScrollParent = function(targetElement) {
		var scrollParent, parentElement;

		scrollParent = targetElement.fastClickScrollParent;

		// Attempt to discover whether the target element is contained within a scrollable layer. Re-check if the
		// target element was moved to another parent.
		if (!scrollParent || !scrollParent.contains(targetElement)) {
			parentElement = targetElement;
			do {
				if (parentElement.scrollHeight > parentElement.offsetHeight) {
					scrollParent = parentElement;
					targetElement.fastClickScrollParent = parentElement;
					break;
				}

				parentElement = parentElement.parentElement;
			} while (parentElement);
		}

		// Always update the scroll top tracker if possible.
		if (scrollParent) {
			scrollParent.fastClickLastScrollTop = scrollParent.scrollTop;
		}
	};


	/**
	 * @param {EventTarget} targetElement
	 * @returns {Element|EventTarget}
	 */
	FastClick.prototype.getTargetElementFromEventTarget = function(eventTarget) {

		// On some older browsers (notably Safari on iOS 4.1 - see issue #56) the event target may be a text node.
		if (eventTarget.nodeType === Node.TEXT_NODE) {
			return eventTarget.parentNode;
		}

		return eventTarget;
	};


	/**
	 * On touch start, record the position and scroll offset.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onTouchStart = function(event) {
		var targetElement, touch, selection;

		// Ignore multiple touches, otherwise pinch-to-zoom is prevented if both fingers are on the FastClick element (issue #111).
		if (event.targetTouches.length > 1) {
			return true;
		}

		targetElement = this.getTargetElementFromEventTarget(event.target);
		touch = event.targetTouches[0];

		if (deviceIsIOS) {

			// Only trusted events will deselect text on iOS (issue #49)
			selection = window.getSelection();
			if (selection.rangeCount && !selection.isCollapsed) {
				return true;
			}

			if (!deviceIsIOS4) {

				// Weird things happen on iOS when an alert or confirm dialog is opened from a click event callback (issue #23):
				// when the user next taps anywhere else on the page, new touchstart and touchend events are dispatched
				// with the same identifier as the touch event that previously triggered the click that triggered the alert.
				// Sadly, there is an issue on iOS 4 that causes some normal touch events to have the same identifier as an
				// immediately preceeding touch event (issue #52), so this fix is unavailable on that platform.
				// Issue 120: touch.identifier is 0 when Chrome dev tools 'Emulate touch events' is set with an iOS device UA string,
				// which causes all touch events to be ignored. As this block only applies to iOS, and iOS identifiers are always long,
				// random integers, it's safe to to continue if the identifier is 0 here.
				if (touch.identifier && touch.identifier === this.lastTouchIdentifier) {
					event.preventDefault();
					return false;
				}

				this.lastTouchIdentifier = touch.identifier;

				// If the target element is a child of a scrollable layer (using -webkit-overflow-scrolling: touch) and:
				// 1) the user does a fling scroll on the scrollable layer
				// 2) the user stops the fling scroll with another tap
				// then the event.target of the last 'touchend' event will be the element that was under the user's finger
				// when the fling scroll was started, causing FastClick to send a click event to that layer - unless a check
				// is made to ensure that a parent layer was not scrolled before sending a synthetic click (issue #42).
				this.updateScrollParent(targetElement);
			}
		}

		this.trackingClick = true;
		this.trackingClickStart = event.timeStamp;
		this.targetElement = targetElement;

		this.touchStartX = touch.pageX;
		this.touchStartY = touch.pageY;

		// Prevent phantom clicks on fast double-tap (issue #36)
		if ((event.timeStamp - this.lastClickTime) < this.tapDelay) {
			event.preventDefault();
		}

		return true;
	};


	/**
	 * Based on a touchmove event object, check whether the touch has moved past a boundary since it started.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.touchHasMoved = function(event) {
		var touch = event.changedTouches[0], boundary = this.touchBoundary;

		if (Math.abs(touch.pageX - this.touchStartX) > boundary || Math.abs(touch.pageY - this.touchStartY) > boundary) {
			return true;
		}

		return false;
	};


	/**
	 * Update the last position.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onTouchMove = function(event) {
		if (!this.trackingClick) {
			return true;
		}

		// If the touch has moved, cancel the click tracking
		if (this.targetElement !== this.getTargetElementFromEventTarget(event.target) || this.touchHasMoved(event)) {
			this.trackingClick = false;
			this.targetElement = null;
		}

		return true;
	};


	/**
	 * Attempt to find the labelled control for the given label element.
	 *
	 * @param {EventTarget|HTMLLabelElement} labelElement
	 * @returns {Element|null}
	 */
	FastClick.prototype.findControl = function(labelElement) {

		// Fast path for newer browsers supporting the HTML5 control attribute
		if (labelElement.control !== undefined) {
			return labelElement.control;
		}

		// All browsers under test that support touch events also support the HTML5 htmlFor attribute
		if (labelElement.htmlFor) {
			return document.getElementById(labelElement.htmlFor);
		}

		// If no for attribute exists, attempt to retrieve the first labellable descendant element
		// the list of which is defined here: http://www.w3.org/TR/html5/forms.html#category-label
		return labelElement.querySelector('button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea');
	};


	/**
	 * On touch end, determine whether to send a click event at once.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onTouchEnd = function(event) {
		var forElement, trackingClickStart, targetTagName, scrollParent, touch, targetElement = this.targetElement;

		if (!this.trackingClick) {
			return true;
		}

		// Prevent phantom clicks on fast double-tap (issue #36)
		if ((event.timeStamp - this.lastClickTime) < this.tapDelay) {
			this.cancelNextClick = true;
			return true;
		}

		if ((event.timeStamp - this.trackingClickStart) > this.tapTimeout) {
			return true;
		}

		// Reset to prevent wrong click cancel on input (issue #156).
		this.cancelNextClick = false;

		this.lastClickTime = event.timeStamp;

		trackingClickStart = this.trackingClickStart;
		this.trackingClick = false;
		this.trackingClickStart = 0;

		// On some iOS devices, the targetElement supplied with the event is invalid if the layer
		// is performing a transition or scroll, and has to be re-detected manually. Note that
		// for this to function correctly, it must be called *after* the event target is checked!
		// See issue #57; also filed as rdar://13048589 .
		if (deviceIsIOSWithBadTarget) {
			touch = event.changedTouches[0];

			// In certain cases arguments of elementFromPoint can be negative, so prevent setting targetElement to null
			targetElement = document.elementFromPoint(touch.pageX - window.pageXOffset, touch.pageY - window.pageYOffset) || targetElement;
			targetElement.fastClickScrollParent = this.targetElement.fastClickScrollParent;
		}

		targetTagName = targetElement.tagName.toLowerCase();
		if (targetTagName === 'label') {
			forElement = this.findControl(targetElement);
			if (forElement) {
				this.focus(targetElement);
				if (deviceIsAndroid) {
					return false;
				}

				targetElement = forElement;
			}
		} else if (this.needsFocus(targetElement)) {

			// Case 1: If the touch started a while ago (best guess is 100ms based on tests for issue #36) then focus will be triggered anyway. Return early and unset the target element reference so that the subsequent click will be allowed through.
			// Case 2: Without this exception for input elements tapped when the document is contained in an iframe, then any inputted text won't be visible even though the value attribute is updated as the user types (issue #37).
			if ((event.timeStamp - trackingClickStart) > 100 || (deviceIsIOS && window.top !== window && targetTagName === 'input')) {
				this.targetElement = null;
				return false;
			}

			this.focus(targetElement);
			this.sendClick(targetElement, event);

			// Select elements need the event to go through on iOS 4, otherwise the selector menu won't open.
			// Also this breaks opening selects when VoiceOver is active on iOS6, iOS7 (and possibly others)
			if (!deviceIsIOS || targetTagName !== 'select') {
				this.targetElement = null;
				event.preventDefault();
			}

			return false;
		}

		if (deviceIsIOS && !deviceIsIOS4) {

			// Don't send a synthetic click event if the target element is contained within a parent layer that was scrolled
			// and this tap is being used to stop the scrolling (usually initiated by a fling - issue #42).
			scrollParent = targetElement.fastClickScrollParent;
			if (scrollParent && scrollParent.fastClickLastScrollTop !== scrollParent.scrollTop) {
				return true;
			}
		}

		// Prevent the actual click from going though - unless the target node is marked as requiring
		// real clicks or if it is in the whitelist in which case only non-programmatic clicks are permitted.
		if (!this.needsClick(targetElement)) {
			event.preventDefault();
			this.sendClick(targetElement, event);
		}

		return false;
	};


	/**
	 * On touch cancel, stop tracking the click.
	 *
	 * @returns {void}
	 */
	FastClick.prototype.onTouchCancel = function() {
		this.trackingClick = false;
		this.targetElement = null;
	};


	/**
	 * Determine mouse events which should be permitted.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onMouse = function(event) {

		// If a target element was never set (because a touch event was never fired) allow the event
		if (!this.targetElement) {
			return true;
		}

		if (event.forwardedTouchEvent) {
			return true;
		}

		// Programmatically generated events targeting a specific element should be permitted
		if (!event.cancelable) {
			return true;
		}

		// Derive and check the target element to see whether the mouse event needs to be permitted;
		// unless explicitly enabled, prevent non-touch click events from triggering actions,
		// to prevent ghost/doubleclicks.
		if (!this.needsClick(this.targetElement) || this.cancelNextClick) {

			// Prevent any user-added listeners declared on FastClick element from being fired.
			if (event.stopImmediatePropagation) {
				event.stopImmediatePropagation();
			} else {

				// Part of the hack for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
				event.propagationStopped = true;
			}

			// Cancel the event
			event.stopPropagation();
			event.preventDefault();

			return false;
		}

		// If the mouse event is permitted, return true for the action to go through.
		return true;
	};


	/**
	 * On actual clicks, determine whether this is a touch-generated click, a click action occurring
	 * naturally after a delay after a touch (which needs to be cancelled to avoid duplication), or
	 * an actual click which should be permitted.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onClick = function(event) {
		var permitted;

		// It's possible for another FastClick-like library delivered with third-party code to fire a click event before FastClick does (issue #44). In that case, set the click-tracking flag back to false and return early. This will cause onTouchEnd to return early.
		if (this.trackingClick) {
			this.targetElement = null;
			this.trackingClick = false;
			return true;
		}

		// Very odd behaviour on iOS (issue #18): if a submit element is present inside a form and the user hits enter in the iOS simulator or clicks the Go button on the pop-up OS keyboard the a kind of 'fake' click event will be triggered with the submit-type input element as the target.
		if (event.target.type === 'submit' && event.detail === 0) {
			return true;
		}

		permitted = this.onMouse(event);

		// Only unset targetElement if the click is not permitted. This will ensure that the check for !targetElement in onMouse fails and the browser's click doesn't go through.
		if (!permitted) {
			this.targetElement = null;
		}

		// If clicks are permitted, return true for the action to go through.
		return permitted;
	};


	/**
	 * Remove all FastClick's event listeners.
	 *
	 * @returns {void}
	 */
	FastClick.prototype.destroy = function() {
		var layer = this.layer;

		if (deviceIsAndroid) {
			layer.removeEventListener('mouseover', this.onMouse, true);
			layer.removeEventListener('mousedown', this.onMouse, true);
			layer.removeEventListener('mouseup', this.onMouse, true);
		}

		layer.removeEventListener('click', this.onClick, true);
		layer.removeEventListener('touchstart', this.onTouchStart, false);
		layer.removeEventListener('touchmove', this.onTouchMove, false);
		layer.removeEventListener('touchend', this.onTouchEnd, false);
		layer.removeEventListener('touchcancel', this.onTouchCancel, false);
	};


	/**
	 * Check whether FastClick is needed.
	 *
	 * @param {Element} layer The layer to listen on
	 */
	FastClick.notNeeded = function(layer) {
		var metaViewport;
		var chromeVersion;
		var blackberryVersion;
		var firefoxVersion;

		// Devices that don't support touch don't need FastClick
		if (typeof window.ontouchstart === 'undefined') {
			return true;
		}

		// Chrome version - zero for other browsers
		chromeVersion = +(/Chrome\/([0-9]+)/.exec(navigator.userAgent) || [,0])[1];

		if (chromeVersion) {

			if (deviceIsAndroid) {
				metaViewport = document.querySelector('meta[name=viewport]');

				if (metaViewport) {
					// Chrome on Android with user-scalable="no" doesn't need FastClick (issue #89)
					if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
						return true;
					}
					// Chrome 32 and above with width=device-width or less don't need FastClick
					if (chromeVersion > 31 && document.documentElement.scrollWidth <= window.outerWidth) {
						return true;
					}
				}

			// Chrome desktop doesn't need FastClick (issue #15)
			} else {
				return true;
			}
		}

		if (deviceIsBlackBerry10) {
			blackberryVersion = navigator.userAgent.match(/Version\/([0-9]*)\.([0-9]*)/);

			// BlackBerry 10.3+ does not require Fastclick library.
			// https://github.com/ftlabs/fastclick/issues/251
			if (blackberryVersion[1] >= 10 && blackberryVersion[2] >= 3) {
				metaViewport = document.querySelector('meta[name=viewport]');

				if (metaViewport) {
					// user-scalable=no eliminates click delay.
					if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
						return true;
					}
					// width=device-width (or less than device-width) eliminates click delay.
					if (document.documentElement.scrollWidth <= window.outerWidth) {
						return true;
					}
				}
			}
		}

		// IE10 with -ms-touch-action: none or manipulation, which disables double-tap-to-zoom (issue #97)
		if (layer.style.msTouchAction === 'none' || layer.style.touchAction === 'manipulation') {
			return true;
		}

		// Firefox version - zero for other browsers
		firefoxVersion = +(/Firefox\/([0-9]+)/.exec(navigator.userAgent) || [,0])[1];

		if (firefoxVersion >= 27) {
			// Firefox 27+ does not have tap delay if the content is not zoomable - https://bugzilla.mozilla.org/show_bug.cgi?id=922896

			metaViewport = document.querySelector('meta[name=viewport]');
			if (metaViewport && (metaViewport.content.indexOf('user-scalable=no') !== -1 || document.documentElement.scrollWidth <= window.outerWidth)) {
				return true;
			}
		}

		// IE11: prefixed -ms-touch-action is no longer supported and it's recomended to use non-prefixed version
		// http://msdn.microsoft.com/en-us/library/windows/apps/Hh767313.aspx
		if (layer.style.touchAction === 'none' || layer.style.touchAction === 'manipulation') {
			return true;
		}

		return false;
	};


	/**
	 * Factory method for creating a FastClick object
	 *
	 * @param {Element} layer The layer to listen on
	 * @param {Object} [options={}] The options to override the defaults
	 */
	FastClick.attach = function(layer, options) {
		return new FastClick(layer, options);
	};


	if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {

		// AMD. Register as an anonymous module.
		define(function() {
			return FastClick;
		});
	} else if (typeof module !== 'undefined' && module.exports) {
		module.exports = FastClick.attach;
		module.exports.FastClick = FastClick;
	} else {
		window.FastClick = FastClick;
	}
}());


var Utils = {

  api: function(url, data) {
    return reqwest({
      url: url,
      data: data,
    })
    .always(function(resp){
      if(!resp.ok){
        console.log(resp);
      }
    });
  },

  // Check if viewport is mobile
  // Disables some JS-events for smaller viewports and changes navigation slideout width

  setMobile: function() {
    if(app.window.get(0).matchMedia("(max-width: 720px)").matches) {
      document.querySelector('html').classList.add('mobile');
      app.mobile = true;
    } else {
      document.querySelector('html').classList.remove('mobile');
      app.mobile = false;
    }
  },

  // Takes items and returns those that are currently in the Viewport.
  inViewport: function(elements, margin, fullyInside) {
    var inViewport = [];

    if(elements.constructor !== Array){
      elements = [elements];
    }
    margin = margin || 0;

    for (var i = elements.length - 1; i >= 0; i--) {
      var element = elements[i],
        bounds = element.getBoundingClientRect(),
        aboveViewport = bounds.bottom - margin < 0,
        belowViewport = window.innerHeight-bounds.top + margin < 0;

        if(fullyInside){
          aboveViewport = bounds.top - margin < 0,
          belowViewport = window.innerHeight-bounds.bottom + margin < 0;
        }

        if( !aboveViewport && !belowViewport ){
          inViewport.push(element);
        }
    }
    return inViewport;
  },

  // Event throttler. Used manily on viewport resize and scrolling, so we don't
  // fire too much function calls at each event

  throttle: function(fn, threshhold, scope) {
    threshhold || (threshhold = 250);
    var last,
        deferTimer;

    return function () {
      var context = scope || this;

      var now = +new Date(),
          args = arguments;

      if (last && now < last + threshhold) {
        clearTimeout(deferTimer);
        deferTimer = setTimeout(function() {
          last = now;
          fn.apply(context, args);
        }, threshhold);
      } else {
        last = now;
        fn.apply(context, args);
      }
    };
  },

  debounce: function(fn, delay) {
    var timer = null;
    return function () {
      var context = this, args = arguments;
      clearTimeout(timer);
      timer = setTimeout(function () {
        fn.apply(context, args);
      }, delay);
    };
  },

  toggleClass: function(element, className, condition){
    if(condition){
      element.addClass(className);
    }else{
      element.removeClass(className);
    }
  },

 isIE: function() {
    var ua = window.navigator.userAgent,
        msie = ua.indexOf("MSIE ");
    app.ie = false;

    if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./)) {
      var doc = document.documentElement;
      doc.setAttribute('data-useragent', navigator.userAgent);
      app.ie = true;
    } else {
      app.ie = false;
    }

    if(app.ie) {
      var el = document.querySelector('body'),
          className = 'ie';

      if(el.classList) {
        el.classList.add(className);
      } else {
        el.className += ' ' + className;
      }
    }
  }

};

Array.prototype.remove = function() {
    var what, a = arguments, L = a.length, ax;
    while (L && this.length) {
        what = a[--L];
        while ((ax = this.indexOf(what)) !== -1) {
            this.splice(ax, 1);
        }
    }
    return this;
};

if(!Array.prototype.indexOf) {
    Array.prototype.indexOf = function(what, i) {
        i = i || 0;
        var L = this.length;
        while (i < L) {
            if(this[i] === what) return i;
            ++i;
        }
        return -1;
    };
}

// //ga
// (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
// (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
// m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
// })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

// ga('create', 'UA-10303525-4', 'auto');
// ga('send', 'pageview');

var Tracking = function(el) {
	this.el = el;
	this.firstScroll = true;
	this.newSections = $(el).children('section').dom;
};

Tracking.prototype.section = function(){
	//Scroll triggers on page load, ignore first
	if(this.firstScroll){
		this.firstScroll = false;
		return;
	}

	var visibleItems = Utils.inViewport(this.newSections);
	for (var i = visibleItems.length - 1; i >= 0; i--) {
		var item = visibleItems[i],
		firstClass = $(item).attr('class').split(" ")[0];

		this.newSections.remove(item);
		this.event(firstClass);

	}
};

Tracking.prototype.event = function(name) {
	var obj = {
		meta_log: {
			c: 'public-action',
			m: name
		}
	};
	Utils.api('/api/system/log', obj);
};

Human = function(el) {
	var _this = this;
	this.el = el;
};

Human.prototype.check = function(){
	$(this.el).on('touchstart mousemove', function(e) {
		$(this.el).off(e);
		if(!localStorage.confimed) {
			localStorage.confimed = "true";
			Utils.api('/guiapi/auth/verify');
		}
	});
};

Alts = function(el) {
	var _this = this;
	this.el = $(el);
	this.bottomFix = 'bottomFix';
	this.position = this.el.position().top;
	this.footer = $('footer').dom;
	this.overflowHidden = false;
};

Alts.prototype.adHidden = function(){
	return app.window.scrollTop() > this.position;
};

Alts.prototype.footerHidden = function(){
	return !Utils.inViewport(this.footer).length;
};

Alts.prototype.onScroll = function(){
	this.lock();
	if(!this.overflowHidden && (this.adHidden() && this.footerHidden()) ){
		this.hideOverflowing();
	}
};

//sets right column to fixed.
Alts.prototype.lock = function(){
	Utils.toggleClass(this.el,'topFix', this.adHidden() && this.footerHidden())
	Utils.toggleClass(this.el,'bottomFix', !this.footerHidden())
};

//hides overflowing items
Alts.prototype.hideOverflowing = function() {
	var listItems = this.el.find('.altsOtherQuestions li').dom;

	this.overflowHidden = true;
	listItems.forEach(function(item){
		var inside = Utils.inViewport($(item).dom, 0 ,true).length;
		if(!inside){
			$(item).addClass('visuallyhidden');
		}

	});
};

Expandable = function(el) {
	this.el = $(el);
	this.trigger = $(el).find('.trigger');
	this.hidden = $(el).find('.collapsed');

	this.setListeners();
};

Expandable.prototype.setListeners = function() {
	var _this = this;
	this.trigger.on('click', function(e) {
		e.preventDefault();
		$(_this.hidden).removeClass('collapsed');
		_this.focus()
	});
};

Expandable.prototype.focus = function() {
	this.textarea = this.el.find('textarea').dom[0];
	if(typeof this.textarea !== 'undefined'){
		this.textarea.focus();
	}
}

// @koala-prepend "vendor/_sprint.js"
// @koala-prepend "vendor/fastclick"
// @koala-prepend "utils/utils.js"
// @koala-prepend "modules/universal_analytics.js"
// @koala-prepend "modules/zenconomy_analytics.js"
// @koala-prepend "modules/alts.js"
// @koala-prepend "modules/expandable.js"


// Init global app scope
var app = {},
    modules;


app.window = $(window);

// Check if IE.
Utils.isIE();

// Define all JS-modules, what selectors that triggers them and load em'

modules = [
 {'name': 'Human',             'selector': 'html',                 'class': Human},
 {'name': 'Alts',              'selector': '.alts',                'class': Alts},
 {'name': 'Expandable',           'selector': '.expandable',      'class': Expandable}
//  {'name': 'State',             'selector': '.dynamicState',       'class': State},
//  {'name': 'Introduction',      'selector': '.introduction',        'class': Introduction},
//  {'name': 'Demo',              'selector': '.demo',                'class': Demo},
//  {'name': 'OverviewService',   'selector': '.overviewServices',  'class': Overview},
//  {'name': 'AboutQuote',        'selector': '.about',               'class': AboutQuote},
//  {'name': 'NavigationButton',  'selector': '.navigationButton',  'class': NavigationButton},
//  {'name': 'Pricing',           'selector': '.pricingServices',   'class': Pricing},
//  {'name': 'QuoteCarousel',     'selector': '.carousel',            'class': QuoteCarousel},
//  {'name': 'Tracking',          'selector': '.main',                 'class': Tracking}
];

$(modules).each(function() {
  var _this = this,
      $this = $(this.selector);

  $($this.dom).each(function(index) {
    app[_this.name] = new _this.class(this);
  });
});

// Check if mobile, and if demo section is in viewport before first scroll event
Utils.setMobile();

// Use global throttled resize event to trigger mobile viewport.
// Disables some JS-events for smaller viewports and changes navigation slideout width

app.window.on('resize',
  Utils.throttle(function() {
    Utils.setMobile();
  })
);

window.onload = function() {
  app.Human.check();
};


// lock alts if applicable
app.window.on('scroll',
  Utils.throttle(function() {
    if(app.Tracking) { app.Tracking.section(); }
    if(app.Alts) { app.Alts.onScroll(); }
  }, 10)
);

//Load fastclick.js. Triggers links faster on touch devices
// https://github.com/ftlabs/fastclick
if ('addEventListener' in document) {
  document.addEventListener('DOMContentLoaded', function() {
    FastClick.attach(document.body);
  }, false);
}

